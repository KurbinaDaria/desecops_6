name: Create Release with Signature and SBOM

# Запускається при створенні тегу, що відповідає шаблону v*.*.* (напр. v1.0.0)
on:
  push:
    tags:
      - 'v*.*.*'

# Надаємо GitHub Actions необхідні дозволи
permissions:
  contents: write      # Для створення релізів та завантаження артефактів
  id-token: write      # Для "keyless" OIDC підпису (Cosign)
  security-events: write # Для завантаження результатів сканувань (якщо потрібно)

jobs:
  # --- 1. ЗАВДАННЯ: Збірка "псевдобінаря" ---
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run linter (flake8)
        run: |
          pip install flake8
          flake8 41_scan_stream_default.py

      - name: Build pseudo-binary with Make
        run: make build # Створить scan_stream.pyz

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: scan-binary
          path: scan_stream.pyz
          retention-days: 1 # Зберігаємо артефакт 1 день (достатньо для workflow)

  # --- 2. ЗАВДАННЯ: Генерація SBOM ---
  generate-sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.15.9

      - name: Generate SBOM from requirements
        run: |
          syft scan file:requirements.txt -o spdx-json=sbom.spdx.json

      
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 1

  # --- 3. ЗАВДАННЯ: Сканування SBOM (Grype) ---
  scan-sbom-with-grype:
    name: Scan SBOM (Grype)
    # Залежить від генерації SBOM
    needs: [generate-sbom]
    runs-on: ubuntu-latest
    steps:
      - name: Download SBOM artifact
        uses: actions/download-artifact@v4
        with:
          name: sbom
          path: .

      - name: Install Grype
        uses: anchore/grype-action@v0.74.8

      - name: Scan SBOM with Grype
        run: |
          # Скануємо SBOM. Якщо Grype знайде вразливості,
          # цей крок провалиться, і workflow зупиниться.
          grype sbom:./sbom.spdx.json

  # --- 4. ЗАВДАННЯ: Підпис (Cosign) та Створення Релізу ---
  sign-and-release:
    name: Sign and Create Release
    # Це завдання запуститься ТІЛЬКИ якщо всі попередні (build, generate-sbom, scan-sbom-with-grype) успішні
    needs: [build, generate-sbom, scan-sbom-with-grype]
    runs-on: ubuntu-latest
    
    steps:
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: scan-binary

      - name: Download SBOM artifact
        uses: actions/download-artifact@v4
        with:
          name: sbom

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.4.0

      - name: Sign artifacts with Cosign (Keyless)
        env:
          # ${GITHUB_REF_NAME} - це змінна середовища, що містить назву тегу (напр. v1.0.0)
          BINARY_NAME: "scan_stream.pyz"
          SBOM_NAME: "sbom.spdx.json"
        run: |
          echo "Signing $BINARY_NAME..."
          cosign sign-blob --yes --output-signature binary.sig $BINARY_NAME
          
          echo "Signing $SBOM_NAME..."
          cosign sign-blob --yes --output-signature sbom.sig $SBOM_NAME
          
          echo "Verifying signatures (optional but good practice)..."
          cosign verify-blob --signature binary.sig $BINARY_NAME
          cosign verify-blob --signature sbom.sig $SBOM_NAME

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # Назва тегу та назва релізу беруться автоматично
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: |
            scan_stream.pyz
            binary.sig
            sbom.spdx.json
            sbom.sig